from fastapi import FastAPI, Body, Path, Query, HTTPExceptionfrom typing import Optionalfrom pydantic import BaseModel, Fieldfrom starlette import statusapp = FastAPI()class Course:    id: int    title: str    instructor: str    rating: int    published_year: int    def __init__(self, id: int, title: str, instructor: str, rating: int, published_year: int):        self.id = id        self.title = title        self.instructor = instructor        self.rating = rating        self.published_year = published_yearcourses_db = [    Course(1, "Python", "Atil", 5, 2034),    Course(2, "Java", "Ali", 4, 2029),    Course(3, "R", "Beyza", 4, 2028),    Course(4, "C#", "Ahmet", 5, 2045),    Course(5, "JavaScript", "Atil", 1, 2036),    Course(6, "Swift", "Zeynep", 2, 2025),]@app.get("/courses", status_code=status.HTTP_200_OK)async def get_courses():    return courses_db@app.get("/courses/{id}", status_code=status.HTTP_200_OK)async def get_course(id: int = Path(..., gt=0)):    for course in courses_db:        if course.id == id:            return course    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Course not found")@app.get("/courses/", status_code=status.HTTP_200_OK)async def get_courses_by_rating(rating: int = Query(gt=0, le=5)):    courses_to_return = []    for course in courses_db:        if course.rating == rating:            courses_to_return.append(course)    return courses_to_return